TITLE: Noah Henderson, CSCI 200 Section A (8 am), Chess Analysis Board/Move Checker

PROBLEM DESCRIPTION: For this project I will create a chess analysis board. An analysis board allows you to 
document lines of moves and save them in a standardized format. These files can be loaded to see old ones 
that you have created. This is not a standard chess game as an analysis board is used 
exclusively for preparation of moves in advance, and to create positions. I plan on making this board compatible with standard format 
so that other analysis files can be viewed here too. Each file will have the ability to be named 
and can have the file to save to specified.

DOCUMENTATION: The way this program works is first it will ask you to point it to a file to write to. Once this
has been accomplishes the main loop starts. The main loop will give the use a black chess board to manipulate.
The user will then follow the prompts to move the pieces around the board as they see fit. They are then able
to Show the moves a piece could take or ask the machine if a move is legal. The user can also grab the current
score of the pieces on the board. These features have all been described. Because this is an analysis board
it allows for some things a normal chess game would not. For instance checkmate. This is becuase there are 
certain studies that require a king to be moved into checkmate these positions are called morphisms. In terms
of features added I added the feature that will check the legality of a move. This was not something I planend
to create but it proved to be something that was fun to code and made sense in the context of the analysis board.
This board also comes with a barebones chess api that could be repurposed into other game/ program loops.

1. Compile with the make commpand
2. Run ./ChessPositions
3. The program will prompt you for a file to write to specify the path to it
4. The board will display and you will input the coordinates of a piece
   the program will first ask you to input the row the piece is on and then the column
5. choose what to do with that piece from the specified options
   you will type the option you want based on what is given and the program will update the board accordingly
6. repeat until you are satisfied and then quit the program
   to quit you select a piece and then choose the quit option on the board then the game will be saved to the file


If I had more time:
- I would add two modes the analysis board as well as a genuine chess game
    - This would be somewhat easy to implement with the methods I have already as the api is already exposed
- I would implement some graphics. As it stands the terminal was the best way for me to do what i wanted in the time we had

LIST DATA STRUCTURE: I chose to use a static 2d array for my list data structure. This structure simply
made sense for a chess board as the number of squares does not change. This means that the board is static
with only the pieces moving. This means that the memory makeup for the array is the same so it makes the
most sense to use.

TESTS:
- Test case 1: inputting a file that does not exist
    - I implemented a failsafe so that if the file does not exit then it will be created
- Test case 2: Choosing an option that is not listed i.e choosing 6
    - if the user inputs a number when choosing an action that is not specified then it will tell the user
    and then it will prompt them again
- Test case 3: Choosing a point/Piece that is not within the range of the board i.e choosing row or column to be 8
    - If this occurs the user will be told that this is out of bounds and then they will be prompted again
- Test Case 4: The user chooses to test a move that is out of bounds i.e they check a move at -1 2
    - If this occurs the user will be made aware and then the program will promt them to re enter the command
- Test Case 5: The user promts for a list of moves on a blank
    - The program will tell the user that this is a blank and then move on and re prompt
- Test Case 6: The user calls for a legal move but the king is in check
    - If the king is in check the user will be notified. The move can still be made as it is an analysis
    board but the legal checkin functionality chekks this for us.

REFLECTION: Through this project, I gained a better understanding of C++ programming and software 
development in general. I had the opportunity to explore new techniques like using auto and the for-each loop, 
which were not covered in class. Additionally, I was able to learn various ways to instantiate objects 
and manipulate variables, and I gained a better understanding of the standard library.

However, due to time constraints, I had to make sacrifices and my project concept was rushed, 
which made it harder to structure. In the future, I would like to take more time to come up with a 
concept and research design patterns or best practices to create a code that is easy to read, maintain, 
and change. I also realized that even with best practices, OOP has limitations when it comes 
to code structure and maintainability.

I also wish that we had gone over inheritance as well as solid pricipals earlier as I was already too
deep into development to redo my project keeping those principals in mind and they would have helped
tremendoulsy with my codes maintainability.

Overall, this project was a valuable learning experience that allowed me to refine my programming 
skills and explore new techniques. It also highlighted the importance of taking the time to 
plan and structure a project to ensure its success.